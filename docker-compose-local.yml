version: '3.8'

services:
  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: chatbot-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - chatbot-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Flask Application (connects to your existing local MSSQL)
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: chatbot-flask-app
    ports:
      - "5000:5000"
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=production
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here-change-in-production}
      - DEBUG=False
      
      # Connect to your existing local MSSQL instance
      - DB_SERVER=host.docker.internal\\SQLEXPRESS
      - DB_DATABASE=SupportChatbot
      - DB_USERNAME=${DB_USERNAME:-}
      - DB_PASSWORD=${DB_PASSWORD:-}
      - DB_USE_WINDOWS_AUTH=False
      
      # Odoo Configuration
      - ODOO_URL=${ODOO_URL:-https://youcloudpay.odoo.com}
      - ODOO_DB=${ODOO_DB:-youcloudpay}
      - ODOO_USERNAME=${ODOO_USERNAME:-pranav.r@youcloudtech.com}
      - ODOO_PASSWORD=${ODOO_PASSWORD:-Pranav.r@1124}
      
      # Redis Connection
      - REDIS_URL=redis://redis:6379
      
      # Logging
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - chatbot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: chatbot-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      app:
        condition: service_healthy
    networks:
      - chatbot-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  redis_data:
    driver: local

networks:
  chatbot-network:
    driver: bridge
