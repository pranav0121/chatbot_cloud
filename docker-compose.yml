version: '3.8'

services:
  # Flask Application Service
  chatbot-app:
    build: 
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: chatbot-flask-app
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - FLASK_APP=app.py
      # Database configuration for Docker host connectivity
      - DB_SERVER=host.docker.internal\SQLEXPRESS
      - DB_DATABASE=SupportChatbot
      - DB_USE_WINDOWS_AUTH=True
    env_file:
      - .env.docker.production
    # Enable host connectivity for SQL Server
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      # Mount logs for monitoring (optional)
      - ./logs:/app/logs
      # Mount uploads directory for persistence (optional)
      - ./uploads:/app/static/uploads
    networks:
      - chatbot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    depends_on:
      - redis
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Redis Service for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: chatbot-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - chatbot-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Development version with better debugging
  chatbot-dev:
    build: 
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: chatbot-flask-dev
    ports:
      - "5001:5000"
    environment:
      - FLASK_ENV=development
      - FLASK_DEBUG=1
      - FLASK_APP=app.py
      - DB_SERVER=host.docker.internal\SQLEXPRESS
      - DB_DATABASE=SupportChatbot
      - DB_USE_WINDOWS_AUTH=True
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - .:/app
      - ./logs:/app/logs
    networks:
      - chatbot-network
    restart: unless-stopped
    profiles:
      - dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# Network configuration
networks:
  chatbot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volume configuration for data persistence
volumes:
  redis-data:
    driver: local
