#!/usr/bin/env python3
"""
UI Testing for End Date tracking
"""

from app import app, db, Ticket, User
import logging
import requests
from datetime import datetime

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_ui_enddate():
    """Test that UI displays EndDate correctly"""
    logger.info("üñ•Ô∏è  UI END DATE DISPLAY TEST")
    logger.info("=" * 40)
    
    base_url = "http://127.0.0.1:5000"
    
    # 1. Test ticket details API (used by UI)
    logger.info("1. Testing API endpoints used by UI:")
    try:
        with app.app_context():
            # Find a resolved/closed ticket with EndDate
            ticket_with_enddate = Ticket.query.filter(
                Ticket.Status.in_(['resolved', 'closed']),
                Ticket.EndDate.isnot(None)
            ).first()
            
            if ticket_with_enddate:
                logger.info(f"   üé´ Testing with Ticket #{ticket_with_enddate.TicketID}")
                logger.info(f"      Status: {ticket_with_enddate.Status}")
                logger.info(f"      EndDate: {ticket_with_enddate.EndDate}")
                
                # Test API endpoint
                response = requests.get(f"{base_url}/api/tickets/{ticket_with_enddate.TicketID}")
                if response.status_code == 200:
                    data = response.json()
                    logger.info(f"   ‚úÖ API Response includes EndDate: {'end_date' in data}")
                    logger.info(f"      EndDate in API: {data.get('end_date')}")
                    
                    # Check formatting
                    if data.get('end_date'):
                        logger.info(f"   ‚úÖ EndDate is properly formatted for UI display")
                    else:
                        logger.info(f"   ‚ÑπÔ∏è  EndDate is null (expected for non-resolved tickets)")
                else:
                    logger.warning(f"   ‚ö†Ô∏è  API returned status {response.status_code}")
            else:
                logger.info("   ‚ö†Ô∏è  No resolved/closed tickets with EndDate found")
    except Exception as e:
        logger.error(f"   ‚ùå API test failed: {e}")
        return False
    
    # 2. Test admin dashboard data
    logger.info("\n2. Testing Admin Dashboard Data:")
    try:
        # This would normally require authentication, but we can test the data structure
        with app.app_context():
            tickets = Ticket.query.filter(Ticket.Status.in_(['resolved', 'closed'])).limit(3).all()
            logger.info(f"   üìã Found {len(tickets)} resolved/closed tickets for UI display:")
            
            for ticket in tickets:
                logger.info(f"      üé´ Ticket #{ticket.TicketID}:")
                logger.info(f"         Status: {ticket.Status}")
                logger.info(f"         CreatedAt: {ticket.CreatedAt}")
                logger.info(f"         EndDate: {ticket.EndDate}")
                
                # Calculate duration for UI display
                if ticket.EndDate and ticket.CreatedAt:
                    duration = ticket.EndDate - ticket.CreatedAt
                    logger.info(f"         Duration: {duration}")
                    logger.info(f"         ‚úÖ Ready for UI display")
                logger.info("")
    except Exception as e:
        logger.error(f"   ‚ùå Dashboard data test failed: {e}")
        return False
    
    # 3. Test data format for UI
    logger.info("3. Testing Data Format for UI:")
    try:
        with app.app_context():
            # Get a sample ticket
            sample = Ticket.query.filter(Ticket.EndDate.isnot(None)).first()
            if sample:
                logger.info(f"   üìã Sample ticket data for UI:")
                logger.info(f"      ID: {sample.TicketID}")
                logger.info(f"      Subject: {sample.Subject}")
                logger.info(f"      Status: {sample.Status}")
                logger.info(f"      Priority: {sample.Priority}")
                logger.info(f"      CreatedAt: {sample.CreatedAt}")
                logger.info(f"      UpdatedAt: {sample.UpdatedAt}")
                logger.info(f"      EndDate: {sample.EndDate}")
                
                # Format for UI display
                if sample.EndDate:
                    formatted_enddate = sample.EndDate.strftime("%Y-%m-%d %H:%M:%S")
                    logger.info(f"      Formatted EndDate: {formatted_enddate}")
                    logger.info(f"   ‚úÖ EndDate formatting ready for UI")
                
                # Calculate resolution time
                if sample.EndDate and sample.CreatedAt:
                    resolution_time = sample.EndDate - sample.CreatedAt
                    hours = resolution_time.total_seconds() / 3600
                    logger.info(f"      Resolution Time: {hours:.2f} hours")
                    logger.info(f"   ‚úÖ Resolution time calculation ready for UI")
            else:
                logger.info("   ‚ö†Ô∏è  No tickets with EndDate found")
    except Exception as e:
        logger.error(f"   ‚ùå UI format test failed: {e}")
        return False
    
    return True

def verify_ui_files():
    """Verify that UI files include EndDate support"""
    logger.info("\n4. Verifying UI Files:")
    
    ui_files = [
        "templates/admin.html",
        "templates/my_tickets.html", 
        "static/js/admin.js"
    ]
    
    for file_path in ui_files:
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            if 'end_date' in content.lower() or 'enddate' in content.lower():
                logger.info(f"   ‚úÖ {file_path} includes EndDate support")
            else:
                logger.warning(f"   ‚ö†Ô∏è  {file_path} may not include EndDate support")
        except FileNotFoundError:
            logger.warning(f"   ‚ö†Ô∏è  {file_path} not found")
        except Exception as e:
            logger.error(f"   ‚ùå Error checking {file_path}: {e}")

if __name__ == "__main__":
    success = test_ui_enddate()
    verify_ui_files()
    
    if success:
        logger.info("\n" + "=" * 40)
        logger.info("üéâ UI END DATE TEST PASSED!")
        logger.info("‚úÖ EndDate data is properly formatted for UI")
        logger.info("‚úÖ API endpoints return EndDate correctly")
        logger.info("‚úÖ Resolution time calculations work")
        logger.info("‚úÖ UI files include EndDate support")
        logger.info("=" * 40)
    else:
        logger.error("\n‚ùå UI TEST FAILED")
